
clearvars;

borderWidth = 3;
corrFact = 0:0.1:1;
frameRate = 3.6169;
win = 10*60*frameRate;  %window duration = 10 minutes

calc_cellF = 0;
calc_dFF = 1; %Calculate dF/F for a variety of neuropil correction factors

%Directory List
flex_setPathList;
data_dir = 'C:\Users\Michael\Documents\Data & Analysis\Sensorimotor Learning';
[ dirs, expData ] = expData_smLearning(data_dir);

if calc_cellF
    for i = 1:numel(expData)
        
        %Get image stack and roi files generated by cellROI.m
        roi_dir = dir(fullfile(dirs.data,expData(i).sub_dir,'ROI*.tif'));
        roiData_mat = fullfile(roi_dir.folder, roi_dir.name, 'roiData.mat');
        S = load(roiData_mat,'pathname','filename');
        stack = double(loadtiffseq(S.pathname,S.filename));
        
        % Populate 3D array containing all cell masks
        fileList = dir(fullfile(roi_dir.folder, roi_dir.name,'*cell*.mat'));
        for j = 1:numel(fileList)
            S = load(fullfile(roi_dir.folder, roi_dir.name, fileList(j).name));
            cellMasks(:,:,j) = S.bw;
            subtractMasks(:,:,j) = S.subtractmask;
        end
        
        %Get cellular and neuropil fluorescence excluding overlapping regions and n-pixel frame
        [roiData, masks] = calcCellF(stack, cellMasks, subtractMasks, borderWidth);
        save(roiData_mat,'-STRUCT','roiData','-append'); %Save to roiData.mat
        save(roiData_mat,'masks','-append'); %Save to roiData.mat
        
    end
end

%%
if calc_dFF
    for i = 1:numel(expData)
               
        %Calculate dF/F from data in roiData.m
        roi_dir = dir(fullfile(dirs.data,expData(i).sub_dir,'ROI*.tif'));
        roiData_mat = fullfile(roi_dir.folder, roi_dir.name, 'roiData.mat');
        S = load(roiData_mat,'cellf','neuropilf');
        
        %Subtract scaled neuropil signal and calculate dF/F (could avoid loops w/ matrix ops if necessary...)
        nROIs = size(S.cellf,1);
        nFrames = size(S.cellf{1},2); %***Future edit: find out why row vector
        corrDFF = NaN(nFrames,numel(corrFact),nROIs);
        for k = 1:nROIs
            disp(['Calculating neuropil corrections for cell ' num2str(k) '...']);
            for j = 1:numel(corrFact)
                corrDFF(:,j,k) = S.cellf{k} - corrFact(j)*S.neuropilf{k}; %Corrected cellular fluorescence (*F*)
            end
        end
        
        baseline = NaN(nFrames,numel(corrFact),nROIs);
        disp(['Calculating dF/F for all cells...']);
        for f = 1:nFrames
            idx1 = max(1,round(f-win/2));
            idx2 = min(size(corrDFF,1),round(f+win/2));
            baseline(f,:,:) = prctile(corrDFF(idx1:idx2,:,:),10);
            if mod(f,100)==0
                disp([num2str(f) ' frames done...']);
            end
        end
        corrDFF = (corrDFF-baseline)./baseline;
        
        dFFData_mat = fullfile(roi_dir.folder, roi_dir.name, 'dFFData.mat');
        save(dFFData_mat,'corrFact','corrDFF','baseline');
    end
end

for i = 1:numel(expData)
    %Get dF/F from dFFData.mat
    roi_dir = dir(fullfile(dirs.data,expData(i).sub_dir,'ROI*.tif'));
    roiData_mat = fullfile(roi_dir.folder, roi_dir.name, 'roiData.mat');
    dffData_mat = fullfile(roi_dir.folder, roi_dir.name, 'dFFData.mat');
    S = load(dffData_mat,'corrDFF');
    dFF = S.corrDFF;
    
end

